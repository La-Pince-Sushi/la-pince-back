import { sequelize, User, Budget, Expense, Category } from "../models/index.js";
import { categoryData } from "./seedData.js";

async function restartTables() {
  try {
    await sequelize.authenticate();
    console.log("‚úÖ Connexion √† la base de donn√©es r√©ussie\n");

    // √âtape 1 : Sauvegarder les donn√©es utilisateur et leurs relations
    console.log("üîÑ Sauvegarde des donn√©es utilisateur et leurs relations...");
    const users = await User.findAll({ raw: true });
    const budgets = await Budget.findAll({ raw: true });
    const expenses = await Expense.findAll({ raw: true });
    console.log("‚úÖ Donn√©es sauvegard√©es avec succ√®s\n");

    // √âtape 2 : R√©initialiser les tables
    console.log("üîÑ R√©initialisation des tables...");
    await sequelize.sync({ force: true });
    console.log("‚úÖ Tables recr√©√©es avec succ√®s\n");

    // √âtape 3 : Resynchroniser les cat√©gories avec categoryData
    console.log("üîÑ Synchronisation des cat√©gories...");
    const existingCategories = await Category.findAll({ raw: true });

    // Identifier les cat√©gories √† ajouter ou √† mettre √† jour
    const categoriesToUpdate = categoryData.filter(category =>
      existingCategories.some(existing => existing.id === category.id && existing.name !== category.name)
    );

    const categoriesToAdd = categoryData.filter(category =>
      !existingCategories.some(existing => existing.id === category.id)
    );

    // Mettre √† jour les cat√©gories existantes
    for (const category of categoriesToUpdate) {
      await Category.update({ name: category.name }, { where: { id: category.id } });
    }

    // Ajouter les nouvelles cat√©gories
    await Category.bulkCreate(categoriesToAdd, { ignoreDuplicates: true });
    console.log("‚úÖ Cat√©gories synchronis√©es avec succ√®s\n");

    // √âtape 4 : Restaurer les donn√©es utilisateur et leurs relations
    console.log("üîÑ Restauration des donn√©es utilisateur et leurs relations...");
    await User.bulkCreate(users, { ignoreDuplicates: true });
    await Budget.bulkCreate(budgets, { ignoreDuplicates: true });
    await Expense.bulkCreate(expenses, { ignoreDuplicates: true });
    console.log("‚úÖ Donn√©es restaur√©es avec succ√®s\n");

    // √âtape 5 : R√©aligner les s√©quences des identifiants
    console.log("üîÑ R√©alignement des s√©quences des identifiants...");
    await sequelize.query(`
      SELECT setval('user_id_seq', (SELECT MAX(id) FROM "user"));
      SELECT setval('category_id_seq', (SELECT MAX(id) FROM "category"));
      SELECT setval('expense_id_seq', (SELECT MAX(id) FROM "expense"));
      SELECT setval('budget_id_seq', (SELECT MAX(id) FROM "budget"));
    `);
    console.log("‚úÖ S√©quences r√©align√©es avec succ√®s\n");

  } catch (error) {
    console.error("\n‚ùå Erreur lors du red√©marrage des tables :", error);
  } finally {
    await sequelize.close();
    console.log("‚úÖ Connexion √† la base de donn√©es ferm√©e\n");
  }
  console.log("‚úÖ Processus de red√©marrage des tables termin√©\n");
}

restartTables();